float //浮动  columns //列
微信fxy2000724 有对应的资料

np中带着np.random
print(np.sum(a,axis=1))     print(np.min(a,axis=0))  #二维，0是列，1是行。
最外面的括号代表着 axis=0，依次往里的括号对应的 axis 的计数就依次加 1
print(np.transpose(A))  矩阵转置
print(np.clip(A,5,10))
print(A.flatten()) /for item in A.flat： print(item)
这里的(3，)是因为shape返回tuple类型，单个元素情况下必须写逗号
print(A[:, np.newaxis])
P9
axis=0针对行进行计算，结束后列数不变，axis=1针对列进行计算，结束后行数不变
axis为0的维是最高维，axis每加1表示降低一个维度，比如一个1*3*4的矩阵，axis=0，表示第三维，以此类推。
就是进一个括号的意思。数字越大越进一层括号。
 hspilt：纵轴拆分 vspilt：纵轴拆分
P10 abcd都指向内存中同一块 引用更确切
b=a.copy()  ！！！就不会同时改变值了
///深拷贝与浅拷贝的问题，区别就是拷贝对象中是否有可变对象的存在，如果都是不可变的，那copy不就是深拷贝了吗
pandas P1 
float64  就是64位（浮点数）  自动换行：在console窗口那里就可以直接点击选择换行
df.describe() 各种数据
randn函数返回一个或一组样本，具有标准正态分布。
df = pd.DataFrame(np.random.randn(9, 4), index=[1, 2, 3, 4, 5, 6, 7, 8, 9], columns=['a', 'b', 'c', 'd'])
P2 选择数据
通过标签选择：loc df.loc【】以标签进行选择   iloc以位置进行选择   print(df[df.a < -1])
三种方式进行数据筛选。
P3 设置值
P4 处理丢失数据
print(df.dropna(axis=0, how='any/all'))
print(df.fillna(value=0))
print(np.any(df.isnull()==True))
P5 pandas导入导出
最常用csv格式  excel可以看  pickle格式只适合python
data = pd.read_csv('student.scv')
data.to_pickle('student.pickle')
P6 pd合并concat
axis=0表示从上到下，axis=1表示从左到右
只要记住0是最高维，低一维+1就OK了，这里最高维就是增加行的方向
res = pd.concat([df1, df2, df3], axis=0, ignore_index=True)
res = pd.concat([df1, df2, df3], join='outer/inner')
res = pd.concat([df1, df2, df3], axis=1,join_axes=[df1.index])
res = df.append(df2,ignore_index=True)
P7 pd合并merge
left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                                  'A': ['A0', 'A1', 'A2', 'A3'],
                                  'B': ['B0', 'B1', 'B2', 'B3']})
right = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                                    'C': ['C0', 'C1', 'C2', 'C3'],
                                    'D': ['D0', 'D1', 'D2', 'D3']})
res = pd.merge(left, right, on='key')
res = pd.merge(left, right, on=['key1', 'key2'], how='inner')  # default for how='inner'
# how = ['left', 'right', 'outer', 'inner']
res = pd.merge(df1, df2, on='col1', how='outer', indicator='indicator_column')
res = pd.merge(boys, girls, on='k', suffixes=['_boy', '_girl'], how='inner')
